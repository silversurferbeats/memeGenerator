{"version":3,"sources":["components/Meme.js","App.js","serviceWorker.js","index.js"],"names":["Meme","_ref","template","onClick","react_default","a","createElement","style","width","key","id","src","url","alt","name","objectToQueryParam","obj","Object","entries","map","_ref2","slicedToArray","value","concat","join","App","_useState","useState","_useState2","templates","setTemplates","_useState3","_useState4","setTemplate","_useState5","_useState6","topText","setTopText","_useState7","_useState8","bottomText","setBottomText","_useState9","_useState10","meme","setMeme","useEffect","fetch","then","x","json","response","data","memes","textAlign","onSubmit","_ref3","asyncToGenerator","regenerator_default","mark","_callee","e","params","wrap","_context","prev","next","preventDefault","template_id","text0","text1","username","password","sent","stop","_x","apply","this","arguments","Meme_Meme","TextField","label","onChange","target","Button","type","Fragment","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8NAEaA,EAAO,SAAAC,GAA2B,IAAxBC,EAAwBD,EAAxBC,SAAUC,EAAcF,EAAdE,QAC/B,OACEC,EAAAC,EAAAC,cAAA,OACEC,MAAO,CAAEC,MAAO,KAChBC,IAAKP,EAASQ,GACdC,IAAKT,EAASU,IACdC,IAAKX,EAASY,KACdX,QAASA,qBCFTY,SAAqB,SAAAC,GAEzB,MAAO,IADQC,OAAOC,QAAQF,GAAKG,IAAI,SAAAlB,GAAA,IAAAmB,EAAAH,OAAAI,EAAA,EAAAJ,CAAAhB,EAAA,GAAEQ,EAAFW,EAAA,GAAOE,EAAPF,EAAA,YAAAG,OAAqBd,EAArB,KAAAc,OAA4BD,KAC/CE,KAAK,OAoFZC,MAjFf,WACE,IAAAC,EAAkCC,mBAAS,IAA3CC,EAAAX,OAAAI,EAAA,EAAAJ,CAAAS,EAAA,GAAOG,EAAPD,EAAA,GAAkBE,EAAlBF,EAAA,GACAG,EAAgCJ,mBAAS,MAAzCK,EAAAf,OAAAI,EAAA,EAAAJ,CAAAc,EAAA,GAAO7B,EAAP8B,EAAA,GAAiBC,EAAjBD,EAAA,GACAE,EAA8BP,mBAAS,IAAvCQ,EAAAlB,OAAAI,EAAA,EAAAJ,CAAAiB,EAAA,GAAOE,EAAPD,EAAA,GAAgBE,EAAhBF,EAAA,GACAG,EAAoCX,mBAAS,IAA7CY,EAAAtB,OAAAI,EAAA,EAAAJ,CAAAqB,EAAA,GAAOE,EAAPD,EAAA,GAAmBE,EAAnBF,EAAA,GACAG,EAAwBf,mBAAS,MAAjCgB,EAAA1B,OAAAI,EAAA,EAAAJ,CAAAyB,EAAA,GAAOE,EAAPD,EAAA,GAAaE,EAAbF,EAAA,GAQA,OANAG,oBAAU,WACRC,MAAM,qCAAqCC,KAAK,SAAAC,GAAC,OAC/CA,EAAEC,OAAOF,KAAK,SAAAG,GAAQ,OAAIrB,EAAaqB,EAASC,KAAKC,YAEtD,IAECT,EAEAxC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAE+C,UAAW,WACvBlD,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,MAAO,KAAOG,IAAKiC,EAAM/B,IAAI,iBAM/CT,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAE+C,UAAW,WACtBpD,GACCE,EAAAC,EAAAC,cAAA,QACEiD,SAAQ,eAAAC,EAAAvC,OAAAwC,EAAA,EAAAxC,CAAAyC,EAAArD,EAAAsD,KAAE,SAAAC,EAAMC,GAAN,IAAAC,EAAAX,EAAAD,EAAA,OAAAQ,EAAArD,EAAA0D,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACRL,EAAEM,iBAEIL,EAAS,CACbM,YAAalE,EAASQ,GACtB2D,MAAOjC,EACPkC,MAAO9B,EACP+B,SAAU,WACVC,SAAU,sBARJR,EAAAE,KAAA,EAUenB,MAAK,wCAAAxB,OACcR,EACtC+C,KAZI,cAUFX,EAVEa,EAAAS,KAAAT,EAAAE,KAAA,EAeWf,EAASD,OAfpB,OAeFA,EAfEc,EAAAS,KAgBR5B,EAAQK,EAAKE,KAAKxC,KAhBV,wBAAAoD,EAAAU,SAAAd,MAAF,gBAAAe,GAAA,OAAAnB,EAAAoB,MAAAC,KAAAC,YAAA,IAmBR1E,EAAAC,EAAAC,cAACyE,EAAD,CAAM7E,SAAUA,IAEhBE,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,CACEC,MAAM,gBACN3D,MAAOc,EACP8C,SAAU,SAAArB,GAAC,OAAIxB,EAAWwB,EAAEsB,OAAO7D,UAGrClB,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,CACEC,MAAM,gBACN3D,MAAOkB,EACP0C,SAAU,SAAArB,GAAC,OAAIpB,EAAcoB,EAAEsB,OAAO7D,UAGxClB,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAQC,KAAK,UAAb,gBAGFnF,GACAE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiF,SAAA,KACElF,EAAAC,EAAAC,cAAA,MAAIiF,UAAU,UAAd,yBACAnF,EAAAC,EAAAC,cAAA,MAAIiF,UAAU,WAAd,2BACC1D,EAAUV,IAAI,SAAAjB,GACb,OACEE,EAAAC,EAAAC,cAACyE,EAAD,CACE7E,SAAUA,EACVC,QAAS,WACP8B,EAAY/B,WCtEVsF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO1F,EAAAC,EAAAC,cAACyF,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpD,KAAK,SAAAqD,GACjCA,EAAaC","file":"static/js/main.670bd825.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Meme = ({ template, onClick }) => {\r\n  return (\r\n    <img\r\n      style={{ width: 200 }}\r\n      key={template.id}\r\n      src={template.url}\r\n      alt={template.name}\r\n      onClick={onClick}\r\n    />\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Meme } from \"./components/Meme\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nimport './styles/style.css'\r\n\r\nconst objectToQueryParam = obj => {\r\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\r\n  return \"?\" + params.join(\"&\");\r\n};\r\n\r\nfunction App() {\r\n  const [templates, setTemplates] = useState([]);\r\n  const [template, setTemplate] = useState(null);\r\n  const [topText, setTopText] = useState(\"\");\r\n  const [bottomText, setBottomText] = useState(\"\");\r\n  const [meme, setMeme] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://api.imgflip.com/get_memes\").then(x =>\r\n      x.json().then(response => setTemplates(response.data.memes))\r\n    );\r\n  }, []);\r\n\r\n  if (meme) {\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <img style={{ width: 200 }} src={meme} alt=\"custom meme\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      {template && (\r\n        <form\r\n          onSubmit={async e => {\r\n            e.preventDefault();\r\n            // add logic to create meme from api\r\n            const params = {\r\n              template_id: template.id,\r\n              text0: topText,\r\n              text1: bottomText,\r\n              username: \"xzk03017\",\r\n              password: \"xzk03017@cndps.com\"\r\n            };\r\n            const response = await fetch(\r\n              `https://api.imgflip.com/caption_image${objectToQueryParam(\r\n                params\r\n              )}`\r\n            );\r\n            const json = await response.json();\r\n            setMeme(json.data.url);\r\n          }}\r\n        >\r\n          <Meme template={template} />\r\n\r\n          <TextField \r\n            label=\"primera parte\"\r\n            value={topText}\r\n            onChange={e => setTopText(e.target.value)}\r\n          \r\n          />\r\n          <TextField \r\n            label=\"segunda parte\"\r\n            value={bottomText}\r\n            onChange={e => setBottomText(e.target.value)}\r\n          />\r\n          \r\n          <Button type=\"submit\">crear meme</Button>\r\n        </form>\r\n      )}\r\n      {!template && (\r\n        <>\r\n          <h1 className='titulo' >PERSONALIZA TUS MEMES</h1>\r\n          <h2 className='parrafo' >elige tu meme favorito:</h2>\r\n          {templates.map(template => {\r\n            return (\r\n              <Meme\r\n                template={template}\r\n                onClick={() => {\r\n                  setTemplate(template);\r\n                }}\r\n              />\r\n            );\r\n          })}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}